// <auto-generated />
using DNX.ProductDetail.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DNX.ProductDetail.API.Migrations
{
    [DbContext(typeof(DnxContext))]
    partial class DnxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("Relational:Sequence:SalesLT.SalesOrderNumber", "'SalesOrderNumber', 'SalesLT', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DNX.ProductDetail.API.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.HasKey("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Address_rowguid");

                    b.HasIndex("StateProvince")
                        .HasName("IX_Address_StateProvince");

                    b.HasIndex("AddressLine1", "AddressLine2", "City", "StateProvince", "PostalCode", "CountryRegion")
                        .HasName("IX_Address_AddressLine1_AddressLine2_City_StateProvince_PostalCode_CountryRegion");

                    b.ToTable("Address","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.BuildVersion", b =>
                {
                    b.Property<byte>("SystemInformationId")
                        .HasColumnName("SystemInformationID");

                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasColumnName("Database Version")
                        .HasMaxLength(25);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SystemInformationId")
                        .HasName("PK__BuildVer__35E58ECA58DA1E77");

                    b.ToTable("BuildVersion");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(128);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("Name");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("NameStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NameStyle")
                        .HasDefaultValueSql("0");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Phone")
                        .HasColumnType("Phone");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("SalesPerson")
                        .HasMaxLength(256);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasMaxLength(8);

                    b.HasKey("CustomerId");

                    b.HasIndex("EmailAddress")
                        .HasName("IX_Customer_EmailAddress");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Customer_rowguid");

                    b.ToTable("Customer","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("CustomerId", "AddressId")
                        .HasName("PK_CustomerAddress_CustomerID_AddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_CustomerAddress_rowguid");

                    b.ToTable("CustomerAddress","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ErrorLogID");

                    b.Property<int?>("ErrorLine");

                    b.Property<string>("ErrorMessage")
                        .IsRequired();

                    b.Property<int>("ErrorNumber");

                    b.Property<string>("ErrorProcedure")
                        .HasMaxLength(126);

                    b.Property<int?>("ErrorSeverity");

                    b.Property<int?>("ErrorState");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("sysname");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID");

                    b.Property<string>("Color")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnName("ProductCategoryID");

                    b.Property<int?>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Size")
                        .HasMaxLength(5);

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<byte[]>("ThumbNailPhoto");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal");

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Product_Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasName("AK_Product_ProductNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Product_rowguid");

                    b.ToTable("Product","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductCategoryID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.Property<int?>("ParentProductCategoryId")
                        .HasColumnName("ParentProductCategoryID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductCategory_Name");

                    b.HasIndex("ParentProductCategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductCategory_rowguid");

                    b.ToTable("ProductCategory","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductDescriptionID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductDescription_rowguid");

                    b.ToTable("ProductDescription","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductModelID");

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("ProductModelId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductModel_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModel_rowguid");

                    b.ToTable("ProductModel","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.ProductModelProductDescription", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnName("ProductDescriptionID");

                    b.Property<string>("Culture")
                        .HasColumnType("nchar(6)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "Culture")
                        .HasName("PK_ProductModelProductDescription_ProductModelID_ProductDescriptionID_Culture");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModelProductDescription_rowguid");

                    b.ToTable("ProductModelProductDescription","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderDetailID");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric")
                        .HasComputedColumnSql("isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0.0");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex("ProductId")
                        .HasName("IX_SalesOrderDetail_ProductID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderDetail_rowguid");

                    b.ToTable("SalesOrderDetail","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasDefaultValueSql("NEXT VALUE FOR [SalesLT].[SalesOrderNumber]");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("AccountNumber");

                    b.Property<int?>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("OnlineOrderFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("OrderNumber");

                    b.Property<byte>("RevisionNumber")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID],(0)),N'*** ERROR ***')")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipMethod")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0.00");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0.00");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("isnull(([SubTotal]+[TaxAmt])+[Freight],(0))");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CustomerId")
                        .HasName("IX_SalesOrderHeader_CustomerID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("ShipToAddressId");

                    b.ToTable("SalesOrderHeader","SalesLT");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.CustomerAddress", b =>
                {
                    b.HasOne("DNX.ProductDetail.API.Models.Address", "Address")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DNX.ProductDetail.API.Models.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.Product", b =>
                {
                    b.HasOne("DNX.ProductDetail.API.Models.ProductCategory", "ProductCategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("DNX.ProductDetail.API.Models.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.ProductCategory", b =>
                {
                    b.HasOne("DNX.ProductDetail.API.Models.ProductCategory", "ParentProductCategory")
                        .WithMany("InverseParentProductCategory")
                        .HasForeignKey("ParentProductCategoryId")
                        .HasConstraintName("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID");
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.ProductModelProductDescription", b =>
                {
                    b.HasOne("DNX.ProductDetail.API.Models.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductDescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DNX.ProductDetail.API.Models.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("DNX.ProductDetail.API.Models.Product", "Product")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DNX.ProductDetail.API.Models.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DNX.ProductDetail.API.Models.SalesOrderHeader", b =>
                {
                    b.HasOne("DNX.ProductDetail.API.Models.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_BillTo_AddressID");

                    b.HasOne("DNX.ProductDetail.API.Models.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DNX.ProductDetail.API.Models.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_ShipTo_AddressID");
                });
#pragma warning restore 612, 618
        }
    }
}
